@import '~bootstrap/scss/mixins';

$grid-columns: 12;

$grid-breakpoints: (
  xs: 0,
  sm: $break-small,
  md: $break-medium,
  lg: $break-large,
  xl: $break-xlarge,
);

.wp-block-my-row {

  > .block-editor-inner-blocks > .block-editor-block-list__layout {

    // Make flexbox.
    display: flex;
    flex-wrap: wrap;

    // Make grid columns.
    > [data-type="my/column"] {

      // Remove maximum width (related to block align setting)
      max-width: none;

      // Remove auto margins.
      margin-left: 0;
      margin-right: 0;

      @each $breakpoint in map-keys($grid-breakpoints) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Allow columns to stretch full width below their breakpoints
        @for $i from 1 through $grid-columns {
          &.col#{$infix}-#{$i} {
            width: 100%;
          }
        }
        &.col#{$infix} {
          width: 100%;
        }

        @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
          // Provide basic `.col-{bp}` classes for equal-width flexbox columns
          &.col#{$infix} {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
          }
          &.col#{$infix}-auto {
            flex: 0 0 auto;
            width: auto;
            max-width: 100%; // Reset earlier grid tiers
          }

          @for $i from 1 through $grid-columns {
            &.col#{$infix}-#{$i} {
              @include make-col($i, $grid-columns);
            }
          }

          @for $i from 0 through $grid-columns {
            &.order#{$infix}-#{$i} { order: $i; }
          }

          // `$grid-columns - 1` because offsetting by the width of an entire row isn't possible
          @for $i from 0 through ($grid-columns - 1) {
            @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
              &.offset#{$infix}-#{$i} {
                @include make-col-offset($i, $grid-columns);
              }
            }
          }
        }
      }
    }
  }
}

// Add padding when the block is selected, for easier interaction.
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/row"].has-child-selected > .block-editor-block-list__block-edit > [data-block] > .wp-block-my-row,
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/row"].is-selected > .block-editor-block-list__block-edit > [data-block] > .wp-block-my-row,
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/column"].has-child-selected > .block-editor-block-list__block-edit > [data-block] > .wp-block-my-column,
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/column"].is-selected > .block-editor-block-list__block-edit > [data-block] > .wp-block-my-column {

	> .block-editor-inner-blocks {
		padding: $block-padding;

    > .block-editor-block-list__layout {
      margin-top: -$block-padding * 2;
  		margin-bottom: -$block-padding * 2;

      // Place block list appender in the same place content will appear.
      > .block-list-appender {
    		margin-left: 0;
    		margin-right: 0;
    	}
    }
	}
}

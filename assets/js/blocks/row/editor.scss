

$grid-columns: 12;

$grid-gutter-width: $block-padding * 2;

$grid-breakpoints: (
  xs: 0,
  sm: $break-small,
  md: $break-medium,
  lg: $break-large,
  xl: $break-xlarge,
);

$container-max-widths: (
  sm: map-get($grid-breakpoints, "sm") - 36,
  md: map-get($grid-breakpoints, "md") - 48,
  lg: map-get($grid-breakpoints, "lg") - 32,
  xl: map-get($grid-breakpoints, "xl") - 60,
);

@import '~bootstrap/scss/mixins';

[data-type="my/row"][data-align="full"] > .block-editor-block-list__block-edit > [data-block] > div > .block-editor-inner-blocks > .block-editor-block-list__layout {
  margin-left: 0;
  margin-right: 0;
}

.wp-block-my-row {
  .block-editor-block-list__block {
    max-width: none;
  }
  > .block-editor-inner-blocks {
    > .block-editor-block-list__layout {
      display: flex;
      flex-wrap: wrap;
      margin-left: -$block-padding;
      margin-right: -$block-padding;

      // Set full heights on column and children.
  		> [data-type="my/column"],
  		> [data-type="my/column"] > .editor-block-list__block-edit,
  		> [data-type="my/column"] > .editor-block-list__block-edit > div[data-block],
  		> [data-type="my/column"] > .editor-block-list__block-edit .wp-block-my-column {
        display: flex;
      	flex-direction: column;
      	flex: 1;
  		}

      > [data-type="my/column"] > .editor-block-list__block-edit {
        &:before {
          top: 0;
          bottom: 0;
        }
        > [data-block] {
          margin-top: $block-padding;
          margin-bottom: $block-padding;
        }

        > .block-editor-block-contextual-toolbar {
          top: -38px;
          transform: translateY(-38px);
        }

        > .block-editor-block-list__breadcrumb {
          top: -18px;
        }
      }

      > [data-type="my/column"] {
        // Remove auto margins.
        margin-left: 0;
        margin-right: 0;

        @each $breakpoint in map-keys($grid-breakpoints) {
          $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

          // Allow columns to stretch full width below their breakpoints
          @for $i from 1 through $grid-columns {
            &.col#{$infix}-#{$i} {
              width: 100%;
            }
          }
          &.col#{$infix} {
            width: 100%;
          }

          @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            &.col#{$infix} {
              flex-basis: 0;
              flex-grow: 1;
              max-width: 100%;
            }
            &.col#{$infix}-auto {
              flex: 0 0 auto;
              width: auto;
              max-width: 100%;
            }

            @for $i from 1 through $grid-columns {
              &.col#{$infix}-#{$i} {
                @include make-col($i, $grid-columns);
              }
            }

            @for $i from 0 through $grid-columns {
              &.order#{$infix}-#{$i} { order: $i; }
            }

            @for $i from 0 through ($grid-columns - 1) {
              @if not ($infix == "" and $i == 0) {
                &.offset#{$infix}-#{$i} {
                  @include make-col-offset($i, $grid-columns);
                }
              }
            }
          }
        }
      }

      > [data-type="my/column"] > .editor-block-list__block-edit {
				> div > .wp-block-my-column > .editor-inner-blocks {
					margin-top: -$default-block-margin;
					margin-bottom: -$default-block-margin;
				}
			}
    }
  }
}

.wp-block-my-row {
  > .block-editor-inner-blocks {
    > .block-editor-block-list__layout {
      > .block-list-appender {
        display: none !important;
      }
    }
  }
}

.wp-block-my-column {
  > .block-editor-inner-blocks {
    > .block-editor-block-list__layout {
      > .block-list-appender {
        margin: $block-padding * 2 $block-padding;
      }
    }
  }
}

.wp-block-my-column {
  &.is-vertically-aligned-top {
  	justify-content: flex-start;
  }
  &.is-vertically-aligned-center {
  	justify-content: center;
  }
  &.is-vertically-aligned-bottom {
  	justify-content: flex-end;
  }
}

/**
 * Add extra padding when the parent block is selected, for easier interaction.
 */
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/row"].is-selected > .block-editor-block-list__block-edit > [data-block] > div > .block-editor-inner-blocks,
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/row"].has-child-selected > .block-editor-block-list__block-edit > [data-block] > div > .block-editor-inner-blocks {
	padding: 0 $block-padding;

	// Negate this padding for the placeholder.
	> .components-placeholder {
    margin: 0 -$block-padding;
		width: calc(100% + #{$block-padding * 2});
	}
}

/**
 * Add extra padding when the parent block is selected, for easier interaction.
 */
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/column"].is-selected > .block-editor-block-list__block-edit > [data-block] > div > .block-editor-inner-blocks,
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/column"].has-child-selected > .block-editor-block-list__block-edit > [data-block] > div > .block-editor-inner-blocks {
	padding: 0 $block-padding;

	// Negate this padding for the placeholder.
	> .components-placeholder {
    margin: 0 -$block-padding;
		width: calc(100% + #{$block-padding * 2});
	}

  > .block-editor-block-list__layout {
    > .block-list-appender {
      margin: $block-padding 0;
    }
  }
}

.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/column"].is-selected > .block-editor-block-list__block-edit > [data-block] > div,
.block-editor-block-list__layout .block-editor-block-list__block[data-type="my/column"].has-child-selected > .block-editor-block-list__block-edit > [data-block] > div {
  margin-top: $block-padding;
  margin-bottom: $block-padding;
}
